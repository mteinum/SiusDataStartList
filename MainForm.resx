<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHYAAADuAAAAggAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGAAAAEAAAABeAAAAdAAA
        AIAAAACCAAAAfAAAAHAAAAAmAAAAAAAAAAAAAAAgAAAAIAAAAAAAAAAAAAAAqAAAAP8AAAC4AAAAAAAA
        AAAAAAAaAAAAJgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAABaAAAApAAAAOQAAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAADwAAAAAAAAAHAAAAOYAAADwAAAAbAAAAIoAAADyAAAA/wAA
        APYAAACQAAAAYgAAAOwAAADmAAAAJgAAAAAAAAAAAAAAAAAAABIAAACKAAAA8AAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAARgAAAAAAAAAMAAAA2gAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAOIAAAAUAAAAAAAAAAAAAABEAAAA6AAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAKwAAAAYAAAAAAAAAAAAAABEAAAA/wAA
        AP8AAAD/AAAA+AAAANwAAAD4AAAA/wAAAP8AAAD/AAAAUAAAAAAAAAAAAAAAOgAAAPgAAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAPwAAADcAAAABgAAAAAAAAAAAAAAAAAA
        AHwAAAD/AAAA/wAAAMgAAAAcAAAAAAAAABYAAAC8AAAA/wAAAP8AAACEAAAAAAAAAAAAAADAAAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAADgAAAAogAAAHAAAABIAAAALAAAABgAAAAMAAAABgAAAAIAAAAAAAAAAAAA
        AH4AAAC8AAAA8gAAAP8AAAD/AAAAJgAAAAAAAAAAAAAAAAAAABwAAAD8AAAA/wAAAPQAAAC+AAAAiAAA
        AOgAAAD/AAAA/wAAAOwAAACKAAAAMAAAAAAAAAAAAAAAAAAAABYAAAAyAAAARAAAAE4AAABWAAAAOAAA
        AAAAAAAAAAAA2gAAAP8AAAD/AAAA/wAAAPoAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAOoAAAD/AAAA/wAA
        AP8AAADuAAAA7AAAAPwAAACOAAAADgAAAAAAAAAuAAAAegAAALoAAADsAAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAACqAAAAAAAAAAAAAABcAAAAlAAAAOQAAAD/AAAA/wAAADwAAAAAAAAAAAAAAAAAAAAsAAAA/AAA
        AP8AAADqAAAAmAAAAGgAAADmAAAAVAAAAAIAAABeAAAAzgAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAOoAAAAOAAAAAAAAAAAAAAAAAAAAaAAAAP8AAAD/AAAA3gAAAEIAAAAKAAAAOAAA
        ANYAAAD/AAAA/wAAAHQAAAAAAAAAAAAAAGgAAAAkAAAAygAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAMoAAAAqAAAAAAAAAAAAAABQAAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAAYAAAAAAAAAAAAAAAJgAAAOgAAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAEQAAAAAAAAAFgAAAOYAAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAADuAAAAHAAAAAAAAACyAAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD8AAAA0AAAAJ4AAAB2AAAAWgAAAEYAAAA6AAAANgAAADwAAABGAAAADgAAAAAAAAASAAAAzAAA
        AN4AAABEAAAAYAAAAOYAAAD/AAAA6gAAAGQAAAA8AAAA1gAAANgAAAAYAAAAAAAAAOYAAAD/AAAA/wAA
        APwAAAC6AAAAXAAAABQAAAAAAAAAAAAAAAAAAAAIAAAAHAAAACQAAAAmAAAAIAAAABYAAAAEAAAAAAAA
        AAAAAAASAAAAEAAAAAAAAAAAAAAAoAAAAP8AAACsAAAAAAAAAAAAAAAKAAAAFAAAAAAAAAAAAAAA5gAA
        AP8AAAC6AAAALgAAAAAAAAAKAAAATAAAAIoAAAC8AAAA5gAAAPwAAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        APoAAACYAAAAAgAAAAAAAAAAAAAAAAAAAAAAAABgAAAAzgAAAGwAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAADoAAAAegAAAAAAAAAyAAAAogAAAPQAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAC4AAAASgAAAEwAAAAmAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAIYAAAAQAAAAogAAAPwAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAMgAAAAQAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAJAAAANIAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAO4AAAC4AAAArAAA
        AJIAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACaAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA9gAA
        AMwAAACkAAAAggAAAHIAAABsAAAAagAAAGwAAAB0AAAAiAAAAKoAAADUAAAA/AAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAGoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOIAAAD/AAAA/wAAAP8AAADiAAAAigAA
        AD4AAAAGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOAAAATAAA
        AJwAAADuAAAA/wAAAP8AAAD/AAAAuAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA6gAAAP8AAADcAAAAWgAA
        AAQAAAAAAAAAHgAAAFoAAACOAAAAtgAAANgAAADoAAAA8AAAAPIAAADuAAAA5gAAANIAAACwAAAAhAAA
        AE4AAAASAAAAAAAAAAwAAAB0AAAA7gAAAP8AAADGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADsAAAAqgAA
        AAwAAAASAAAAdAAAANAAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAPoAAADAAAAAYgAAAAgAAAAcAAAAyAAAAMgAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AKQAAAAGAAAAdAAAAPAAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA5AAAAFgAAAAOAAAAogAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAIAAAALAAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAIgAAAAmAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAACAAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AFIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAN4AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAAsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA2gAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAACsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB0AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/AAAAEYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAACaAAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAPwAAAByAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAABaAAAA4AAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAADOAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAGAAAAWgAAALYAAAD4AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAPIAAACqAAAASAAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAABEAAAAeAAAAKAAAAC+AAAA1AAA
        ANwAAADcAAAA2gAAANAAAAC6AAAAmgAAAHAAAAA8AAAABgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA////P//z/j/8AOQT4ADgA8AA8AeAAfHDAP/D4Af/g+AeAcPhcAHxx8AA
        8AeAAOADAH/mMwf//j8eAD9/cAAf/0AAA/+AAAA/AB8APwP/+B8fAB8fOAADn2AAAN+AAAA/AAAAPwAA
        AB8AAAAfgAAAP4AAAH/gAAD/+AAD//+AP/8=
</value>
  </data>
</root>